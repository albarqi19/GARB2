# خطة تطوير واجهات وموارد Filament لمشروع إدارة مركز تحفيظ القرآن الكريم

تاريخ آخر تحديث: 29 أبريل 2025

## المقدمة

هذا المستند يحتوي على خطة تفصيلية لتطوير موارد Filament وإعداد واجهات لوحة التحكم لمشروع إدارة مركز تحفيظ القرآن الكريم. الخطة تأخذ بعين الاعتبار قاعدة البيانات الحالية وتحدد الخطوات اللازمة لبناء نظام متكامل.

## مراحل التطوير

سنقوم بتقسيم العمل إلى مراحل متسلسلة، كل مرحلة تبني على المرحلة التي قبلها. يتم توثيق كل خطوة بمجرد الانتهاء منها في هذا الملف.

### المرحلة 1: إعداد لوحة التحكم وتكوين Filament ✅

#### الخطوة 1: إعداد لوحة التحكم الرئيسية Filament ✅

**تاريخ التنفيذ:** 29 أبريل 2025

**الإجراءات المتخذة:**

1. إنشاء مزود خدمة Filament Panel لإدارة مركز تحفيظ القرآن الكريم:
   ```bash
   php artisan make:filament-panel admin
   ```

2. تكوين لوحة التحكم في مزود الخدمة:
   - تسمية اللوحة: "منصة غرب لإدارة مراكز تحفيظ القرآن الكريم"
   - ضبط المسار على "admin"
   - تفعيل المصادقة مع صفحة تسجيل الدخول
   - تكوين القوالب والملفات الساكنة (static)

3. تنفيذ تحديثات الأصول (assets) والتأكد من عمل اللوحة:
   ```bash
   php artisan filament:assets
   ```

4. تسجيل جميع موارد Filament الموجودة في مزود الخدمة

**النتائج:**
- تم إنشاء لوحة تحكم رئيسية بمسار `/admin`
- تم تكوين نظام المصادقة للوحة التحكم
- تم إعداد الهيكل الأساسي لتسجيل الموارد والصفحات

#### الخطوة 2: تكوين الشعار والألوان حسب هوية المشروع ✅

**تاريخ التنفيذ:** 29 أبريل 2025

**الإجراءات المتخذة:**

1. استخدام شعار المشروع الموجود (logo_garb) في لوحة التحكم:
   ```php
   ->brandLogo(asset('images/logo.png'))
   ```

2. تكوين اللون الأساسي للمشروع بتدرجات اللون الأزرق المستوحاة من الشعار:
   ```php
   ->colors([
       'primary' => [
           50 => '240, 249, 255',
           100 => '224, 242, 254',
           // ... باقي تدرجات اللون الأزرق
       ],
       // ... المزيد من الألوان
   ])
   ```

3. إضافة الألوان الثانوية والأخرى المستخدمة في النظام

**النتائج:**
- تم تطبيق هوية المشروع البصرية على لوحة التحكم
- تم استخدام شعار المشروع في واجهة المستخدم
- تم تكوين مجموعة متناسقة من الألوان تتوافق مع هوية المشروع

#### الخطوة 3: تكوين القوائم والتنقل ✅

**تاريخ التنفيذ:** 29 أبريل 2025

**الإجراءات المتخذة:**

1. تنظيم القوائم في مجموعات رئيسية حسب طلب العميل:
   ```php
   ->navigationGroups([
       'الرئيسية',
       'التعليمية',
       'المالية',
       'التسويق',
       'الإدارية',
       'إدارة النظام',
   ])
   ```

2. تحديد ترتيب المجموعات بشكل منطقي يسهل الوصول إلى الأقسام الأكثر استخدامًا

**النتائج:**
- تم تنظيم قوائم لوحة التحكم في مجموعات واضحة وسهلة الاستخدام
- تم تحديد الهيكل التنظيمي للنظام وفقًا لاحتياجات العمل

#### الخطوة 4: إنشاء لوحات المعلومات الرئيسية (Dashboard) ✅

**تاريخ التنفيذ:** 29 أبريل 2025

**الإجراءات المتخذة:**

1. إنشاء صفحة لوحة معلومات مخصصة:
   ```php
   php artisan make:filament-page Dashboard --panel=admin
   ```

2. تكوين لوحة المعلومات الرئيسية:
   ```php
   class Dashboard extends BaseDashboard
   {
       protected static ?string $navigationIcon = 'heroicon-o-home';
       protected static ?string $navigationGroup = 'الرئيسية';
       // ... المزيد من الإعدادات
   }
   ```

3. إضافة الويدجات إلى لوحة المعلومات لعرض البيانات المهمة

**النتائج:**
- تم إنشاء صفحة لوحة معلومات رئيسية مخصصة للمشروع
- تم إعداد خصائص لوحة المعلومات وربطها بمجموعة "الرئيسية"
- تم تكوين الويدجات التي ستظهر في لوحة المعلومات

#### الخطوة 5: إعداد ويدجيت الإحصائيات الأساسية ✅

**تاريخ التنفيذ:** 29 أبريل 2025

**الإجراءات المتخذة:**

1. إنشاء ويدجت للإحصائيات التعليمية:
   ```php
   class EducationalStatsWidget extends BaseWidget
   {
       // ... كود الويدجت
   }
   ```

2. إنشاء ويدجت للإحصائيات المالية:
   ```php
   class FinancialStatsWidget extends BaseWidget
   {
       // ... كود الويدجت
   }
   ```

3. إنشاء ويدجت لإحصائيات التسويق:
   ```php
   class MarketingStatsWidget extends BaseWidget
   {
       // ... كود الويدجت
   }
   ```

4. ربط الويدجات بلوحة المعلومات الرئيسية:
   ```php
   public function getWidgets(): array
   {
       return [
           AccountWidget::class,
           EducationalStatsWidget::class,
           FinancialStatsWidget::class,
           MarketingStatsWidget::class,
       ];
   }
   ```

**النتائج:**
- تم إنشاء 3 ويدجات إحصائية رئيسية تغطي مجالات المشروع المختلفة
- تم تكوين كل ويدجت لعرض البيانات المناسبة لقسمه
- تم ربط الويدجات بلوحة المعلومات الرئيسية
- تم استخدام ألوان وأيقونات متناسقة في جميع الويدجات

### المرحلة 2: تطوير موارد الهيكل الأساسي ✅

**تاريخ التنفيذ:** 29 أبريل 2025

#### الخطوة 1: إنشاء موارد المساجد (Mosques) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد المساجد باستخدام الأمر:
   ```bash
   php artisan make:filament-resource Mosque --panel=admin --generate
   ```
2. تخصيص المورد بإضافة:
   - الترجمة العربية (مسجد، المساجد)
   - أيقونة مناسبة (heroicon-o-building-library)
   - ضبط مجموعة التنقل (التعليمية)
   - تحسين نماذج الإدخال وأعمدة جداول العرض
   - إضافة فلاتر البحث حسب الحي

3. إنشاء مدير علاقة الحلقات القرآنية للمساجد:
   ```bash
   php artisan make:filament-relation-manager MosqueResource quranCircles --panel=admin
   ```
   
4. إضافة صفحة عرض تفصيلية للمسجد

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة المساجد
- تم ربط المساجد بالحلقات القرآنية
- إمكانية عرض تفاصيل كل مسجد والحلقات المرتبطة به

#### الخطوة 2: إنشاء موارد الحلقات القرآنية (Quran Circles) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد الحلقات القرآنية:
   ```bash
   php artisan make:filament-resource QuranCircle --panel=admin --generate
   ```
   
2. تخصيص المورد بإضافة:
   - الترجمة العربية (حلقة قرآنية، الحلقات القرآنية)
   - أيقونة مناسبة (heroicon-o-book-open)
   - تقسيم نموذج الإدخال إلى أقسام منطقية
   - إضافة حقول متعددة لمعلومات الحلقة
   - تنفيذ فلاتر متقدمة للبحث عن الحلقات

3. إنشاء مدير علاقة المعلمين للحلقات الفردية:
   ```bash
   php artisan make:filament-relation-manager QuranCircleResource teacher --panel=admin
   ```

4. إضافة صفحة عرض تفصيلية للحلقات القرآنية

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة الحلقات القرآنية
- تم تمييز أنواع الحلقات (فردية، جماعية) وحالات الحلقات بألوان مختلفة
- إمكانية ربط الحلقات بالمساجد والمعلمين والمشرفين

#### الخطوة 3: إنشاء موارد معلمي الحلقات الفردية (Individual Circle Teachers) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد معلمي الحلقات الفردية:
   ```bash
   php artisan make:filament-resource IndividualCircleTeacher --panel=admin --generate
   ```
   
2. تخصيص المورد بإضافة:
   - الترجمة العربية (معلم حلقة فردية، معلمي الحلقات الفردية)
   - أيقونة مناسبة (heroicon-o-academic-cap)
   - تقسيم نموذج الإدخال إلى أقسام منطقية
   - إضافة حقول للبيانات الشخصية والمؤهلات
   - إضافة فلاتر للبحث حسب الجنسية والحالة

3. إضافة صفحة عرض تفصيلية للمعلمين

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة معلمي الحلقات الفردية
- إمكانية تتبع بيانات المعلمين ومؤهلاتهم
- ربط المعلمين بالحلقات القرآنية المناسبة

#### الخطوة 4: إنشاء موارد التقويم الدراسي والفصول الدراسية (Academic Calendar & Terms) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد التقويم الدراسي:
   ```bash
   php artisan make:filament-resource AcademicCalendar --panel=admin --generate
   ```
   
2. إنشاء مورد الفصول الدراسية:
   ```bash
   php artisan make:filament-resource AcademicTerm --panel=admin --generate
   ```
   
3. تخصيص موارد التقويم والفصول بإضافة:
   - الترجمات العربية المناسبة
   - أيقونات مناسبة (heroicon-o-calendar, heroicon-o-calendar-days)
   - حقول التواريخ والفترات الزمنية
   - ربط الفصول الدراسية بالتقويم الدراسي

4. إنشاء مدير علاقة الفصول الدراسية للتقويم الدراسي:
   ```bash
   php artisan make:filament-relation-manager AcademicCalendarResource academicTerms --panel=admin
   ```

5. إضافة صفحات عرض تفصيلية للتقويم والفصول الدراسية

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة التقويم الدراسي والفصول
- إمكانية تحديد الفصل والتقويم الحالي
- تمكين عرض علاقات هرمية بين التقويم والفصول الدراسية

#### الخطوة 5: إنشاء موارد الإجازات وأيام التعطيل (Holidays & Non-Attendance Days) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد الإجازات:
   ```bash
   php artisan make:filament-resource Holiday --panel=admin --generate
   ```
   
2. إنشاء مورد أيام التعطيل:
   ```bash
   php artisan make:filament-resource NonAttendanceDay --panel=admin --generate
   ```
   
3. تخصيص موارد الإجازات وأيام التعطيل بإضافة:
   - الترجمات العربية المناسبة
   - أيقونات مناسبة (heroicon-o-sun, heroicon-o-x-circle)
   - ربط الإجازات وأيام التعطيل بالتقويم الدراسي
   - إضافة حقول مخصصة لأسباب التعطيل والإجازات

4. إضافة صفحات عرض تفصيلية للإجازات وأيام التعطيل

**النتائج:**
- تم إنشاء واجهات متكاملة لإدارة الإجازات وأيام التعطيل
- إمكانية تصنيف الإجازات (رسمية/غير رسمية) وأيام التعطيل (طارئة/مخططة)
- ربط بيانات الإجازات والتعطيل بالتقويم الدراسي

**ملاحظات وتحديات المرحلة الثانية:**
- تم التغلب على تحديات إنشاء صفحات العرض وربط العلاقات
- تم اعتماد نهج تدريجي في إنشاء الموارد لتجنب الأخطاء أثناء ربط العلاقات
- تمت مراعاة تصميم واجهات سهلة الاستخدام واتباع معايير UX/UI

### المرحلة 3: تطوير موارد الأفراد والموظفين ✅

**تاريخ التنفيذ:** 29 أبريل 2025

#### الخطوة 1: إنشاء موارد الموظفين (Employees) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد الموظفين:
   ```bash
   php artisan make:filament-resource Employee --panel=admin --generate
   ```
   
2. تخصيص المورد بإضافة:
   - الترجمة العربية (موظف، الموظفين)
   - أيقونة مناسبة (heroicon-o-user-group)
   - ضبط مجموعة التنقل (الإدارية)
   - تقسيم نموذج الإدخال إلى أقسام منطقية (البيانات الشخصية، بيانات الوظيفة، فترات العمل، المستندات والروابط، الملاحظات)

3. تحسين واجهة عرض البيانات وإضافة:
   - عرض فترات العمل بشكل واضح
   - فلاتر للبحث حسب تاريخ التعيين والمسمى الوظيفي
   - أزرار لتعديل وعرض بيانات الموظفين

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة الموظفين
- تقسيم البيانات إلى أقسام منطقية يسهل التعامل معها
- إمكانية تتبع فترات عمل الموظفين والمستندات المرتبطة بهم

#### الخطوة 2: إنشاء موارد المعلمين (Teachers) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد المعلمين:
   ```bash
   php artisan make:filament-resource Teacher --panel=admin --generate
   ```
   
2. تخصيص المورد بإضافة:
   - الترجمة العربية (معلم، المعلمين)
   - أيقونة مناسبة (heroicon-o-academic-cap)
   - ضبط مجموعة التنقل (التعليمية)
   - تقسيم نموذج الإدخال إلى أقسام منطقية (البيانات الشخصية، بيانات العمل، البيانات المالية والتقييم)

3. تحسين واجهة عرض البيانات وإضافة:
   - تلوين نوع المهمة بألوان مختلفة (معلم بمكافأة، معلم محتسب، مشرف، مساعد مشرف)
   - عرض بيانات المسجد والحلقة المرتبطة بالمعلم
   - فلاتر متقدمة للبحث حسب نوع المهمة والمسجد ونوع الحلقة

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة المعلمين
- ربط المعلمين بالمساجد والحلقات القرآنية
- إمكانية تمييز أنواع المعلمين بألوان مختلفة
- دعم الفلترة حسب معايير متعددة لتسهيل الوصول للبيانات

#### الخطوة 3: إنشاء موارد مشرفي الحلقات (Circle Supervisors) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد مشرفي الحلقات:
   ```bash
   php artisan make:filament-resource CircleSupervisor --panel=admin --generate
   ```
   
2. تخصيص المورد بإضافة:
   - الترجمة العربية (مشرف حلقة، مشرفي الحلقات)
   - أيقونة مناسبة (heroicon-o-clipboard-document-check)
   - ضبط مجموعة التنقل (التعليمية)
   - تقسيم نموذج الإدخال إلى أقسام (بيانات الإشراف، ملاحظات الإشراف)

3. تحسين واجهة العرض وإضافة:
   - عرض بيانات المشرف والحلقة والمسجد
   - عرض عدد الزيارات ومتوسط التقييم
   - إضافة إجراء لتفعيل/إنهاء الإشراف
   - فلاتر للبحث حسب المشرف والحلقة والحالة

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة مشرفي الحلقات
- إمكانية تتبع فترات الإشراف وتقييمات المشرفين للحلقات
- ربط المشرفين بالحلقات القرآنية مع تحديد فترة الإشراف

#### الخطوة 4: إنشاء موارد الطلاب (Students) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد الطلاب:
   ```bash
   php artisan make:filament-resource Student --panel=admin --generate
   ```
   
2. تخصيص المورد بإضافة:
   - الترجمة العربية (طالب، الطلاب)
   - أيقونة مناسبة (heroicon-o-user)
   - ضبط مجموعة التنقل (التعليمية)
   - تقسيم نموذج الإدخال إلى أقسام منطقية (البيانات الشخصية، بيانات الحلقة والمسجد، بيانات الحفظ والمراجعة، بيانات ولي الأمر، الملاحظات)

3. تحسين واجهة العرض وإضافة:
   - عرض عمر الطالب ومدة الالتحاق بشكل تلقائي
   - عرض عدد الأجزاء المحفوظة وحالة الطالب
   - إضافة إجراء لتنشيط/تعطيل الطلاب
   - فلاتر للبحث حسب الحالة والمسجد والحلقة وعدد الأجزاء المحفوظة

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة الطلاب
- إمكانية تتبع تقدم الطالب في الحفظ والمراجعة
- ربط الطلاب بالحلقات القرآنية والمساجد
- عرض بيانات أولياء الأمور والملاحظات المتعلقة بالطلاب

**ملاحظات وتحديات المرحلة الثالثة:**
- تم التغلب على تحديات إنشاء صفحات العرض غير الموجودة عند إنشاء الموارد الجديدة
- تم تحسين تنظيم الحقول لتقديم تجربة مستخدم أفضل
- تمت إضافة إجراءات مخصصة تناسب طبيعة كل مورد (مثل تفعيل/إنهاء الإشراف، تنشيط/تعطيل الطلاب)
- تم تنظيم الفلاتر لتسهيل عمليات البحث المتقدم في كل مورد

### المرحلة 4: تطوير موارد الإدارة المالية ✅

#### الخطوة 1: إنشاء موارد معدلات الرواتب (Salary Rates) ✅

#### الخطوة 2: إنشاء موارد الحضور (Attendances) ✅

#### الخطوة 3: إنشاء موارد الرواتب وتفاصيلها (Salaries & Salary Details) ✅

#### الخطوة 4: إنشاء موارد حوافز الحلقات والمعلمين (Circle & Teacher Incentives) ✅

#### الخطوة 5: تطوير موارد ميزانيات الحلقات (Circle Budgets) ✅

#### الخطوة 6: إنشاء موارد العهد المالية (Financial Custodies) وعناصرها ✅

**تاريخ التنفيذ:** 29 أبريل 2025

**الإجراءات المتخذة:**

1. إنشاء مورد العهد المالية:
   ```bash
   php artisan make:filament-resource FinancialCustody --panel=admin --generate
   ```

2. تخصيص مورد العهد المالية بإضافة:
   - الترجمة العربية (عهدة مالية، العهد المالية)
   - أيقونة مناسبة (heroicon-o-wallet)
   - ضبط مجموعة التنقل (المالية)
   - تقسيم نموذج الإدخال إلى أقسام منطقية:
     - البيانات الأساسية (رقم الطلب، مقدم الطلب، المسمى الوظيفي، المسجد)
     - البيانات المالية (المبلغ الإجمالي، الحالة، طريقة الصرف)
     - بيانات التواريخ (تاريخ الطلب، تاريخ الاعتماد، تاريخ الصرف)
     - معلومات إضافية (المعتمد، ملاحظات)

3. تحسين واجهة عرض البيانات وإضافة:
   - عرض رقم الطلب ومقدم الطلب والمسجد
   - عرض المبلغ الإجمالي والمستخدم والمتبقي مع تلوين المتبقي
   - عرض حالة العهدة باستخدام شارات (badges) ملونة
   - إضافة إجراءات (اعتماد، رفض، صرف، إغلاق، إضافة إيصال)
   - فلاتر للبحث حسب مقدم الطلب والمسجد والحالة وفترة الطلب
   - إجراءات جماعية للتعامل مع عدة عهد في وقت واحد

4. إنشاء مورد عناصر العهد المالية:
   ```bash
   php artisan make:filament-resource FinancialCustodyItem --panel=admin --generate
   ```

5. تخصيص مورد عناصر العهد المالية بإضافة:
   - الترجمة العربية (عنصر عهدة، عناصر العهد المالية)
   - أيقونة مناسبة (heroicon-o-document-text)
   - ضبط مجموعة التنقل (المالية)
   - ربط عناصر العهد بالعهدة الأساسية والتصنيف
   - إمكانية إنشاء تصنيفات جديدة مباشرة من نموذج إدخال عنصر العهدة

6. تنفيذ إصلاح للأخطاء التي ظهرت:
   - إصلاح خطأ العلاقة في مورد العهد المالية الذي كان يسبب خطأ:
     ```
     Filament\Support\Services\RelationshipJoiner::prepareQueryForNoConstraints():
     Argument #1 ($relationship) must be of type Illuminate\Database\Eloquent\Relations\Relation, null given
     ```
   - إصلاح خطأ في مورد عناصر العهد المالية الذي كان يظهر:
     ```
     SQLSTATE[42S22]: Column not found: 1054 Unknown column 'financial_custodies.title'
     ```
   - تعديل العلاقات لاستخدام حقل `request_number` بدلاً من `title` الغير موجود

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة العهد المالية وعناصرها
- تم تمكين المستخدمين من:
  - إنشاء عهد مالية جديدة ومتابعة حالاتها
  - إضافة عناصر للعهد المالية وربطها بتصنيفات
  - متابعة المبالغ المستخدمة والمتبقية في العهد
  - تنفيذ دورة حياة العهدة من الإنشاء وحتى الإغلاق
  - البحث والفلترة المتقدمة للعهد وعناصرها
- تم ضمان اتساق البيانات من خلال:
  - ربط العهد بالمستخدمين والمساجد
  - حساب المبالغ المستخدمة والمتبقية تلقائيًا
  - إظهار شارات ملونة لتوضيح حالة العهدة
- تم إصلاح الأخطاء التي ظهرت في العلاقات بين النماذج والموارد

**ملاحظات تطوير العهد المالية:**
- كان هناك عدم توافق بين نموذج البيانات وكيفية استخدامه في الموارد، تم إصلاحه
- تم تحسين تجربة المستخدم من خلال الألوان والشارات والإجراءات المناسبة
- بناء واجهة تفاعلية كاملة لإدارة دورة حياة العهد المالية

### المرحلة 5: تطوير موارد الإيرادات والمصروفات ✅

**تاريخ التنفيذ:** 29 أبريل 2025

#### الخطوة 1: إنشاء موارد أنواع الإيرادات (Revenue Types) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد أنواع الإيرادات:
   ```bash
   php artisan make:filament-resource RevenueType --panel=admin --generate
   ```

2. تخصيص المورد بإضافة:
   - الترجمة العربية (نوع إيراد، أنواع الإيرادات)
   - أيقونة مناسبة (heroicon-o-banknotes)
   - ضبط مجموعة التنقل (المالية)
   - تحسين نماذج الإدخال وأعمدة جداول العرض
   - إضافة خيارات التفعيل/التعطيل لأنواع الإيرادات

3. إنشاء مدير علاقة الإيرادات المرتبطة بنوع الإيراد:
   ```bash
   php artisan make:filament-relation-manager RevenueTypeResource revenues Revenue --panel=admin
   ```

4. تخصيص مدير العلاقة لعرض الإيرادات المرتبطة بكل نوع مع إمكانية:
   - عرض مبالغ الإيرادات بتنسيق العملة
   - تحديد الحلقة القرآنية أو إذا كان للمركز
   - تخزين بيانات المتبرع وملاحظات الإيراد

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة أنواع الإيرادات
- إمكانية تفعيل/تعطيل أنواع الإيرادات
- ربط الإيرادات بأنواعها للتصنيف الصحيح
- عرض عدد الإيرادات المرتبطة بكل نوع

#### الخطوة 2: إنشاء موارد الإيرادات (Revenues) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد الإيرادات:
   ```bash
   php artisan make:filament-resource Revenue --panel=admin --generate
   ```

2. تخصيص المورد بإضافة:
   - الترجمة العربية (إيراد، الإيرادات)
   - أيقونة مناسبة (heroicon-o-currency-dollar)
   - ضبط مجموعة التنقل (المالية)
   - تقسيم نموذج الإدخال إلى أقسام منطقية:
     - معلومات الإيراد الأساسية (النوع، المبلغ، الحلقة، الفصل الدراسي)
     - معلومات المتبرع (الاسم، معلومات الاتصال، مرجع المعاملة)
     - ملاحظات إضافية

3. تحسين واجهة عرض البيانات وإضافة:
   - عرض المبالغ بتنسيق العملة السعودية
   - عرض نوع الإيراد والحلقة المرتبطة
   - تمييز الإيرادات المخصصة للمركز بأيقونة مميزة
   - فلاتر متقدمة للبحث حسب نوع الإيراد والحلقة والفصل الدراسي والفترة الزمنية

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة الإيرادات
- إمكانية تصنيف الإيرادات حسب نوعها والحلقة المرتبطة أو المركز
- عرض بيانات المتبرعين وتفاصيل المعاملات
- تسجيل المستخدم الذي أدخل البيانات بشكل تلقائي

#### الخطوة 3: إنشاء موارد أنواع المصروفات (Expense Types) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد أنواع المصروفات:
   ```bash
   php artisan make:filament-resource ExpenseType --panel=admin --generate
   ```

2. تخصيص المورد بإضافة:
   - الترجمة العربية (نوع مصروف، أنواع المصروفات)
   - أيقونة مناسبة (heroicon-o-credit-card)
   - ضبط مجموعة التنقل (المالية)
   - تحسين نماذج الإدخال وأعمدة جداول العرض
   - إضافة خيارات التفعيل/التعطيل لأنواع المصروفات

3. إنشاء مدير علاقة المصروفات المرتبطة بنوع المصروف:
   ```bash
   php artisan make:filament-relation-manager ExpenseTypeResource expenses Expense --panel=admin
   ```

4. تخصيص مدير العلاقة لعرض المصروفات المرتبطة بكل نوع مع إمكانية:
   - عرض مبالغ المصروفات بتنسيق العملة
   - تحديد الحلقة القرآنية أو إذا كان للمركز
   - تخزين بيانات المستفيد والمعتمد وملاحظات المصروف

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة أنواع المصروفات
- إمكانية تفعيل/تعطيل أنواع المصروفات
- ربط المصروفات بأنواعها للتصنيف الصحيح
- عرض عدد المصروفات المرتبطة بكل نوع

#### الخطوة 4: إنشاء موارد المصروفات (Expenses) ✅

**الإجراءات المتخذة:**
1. إنشاء مورد المصروفات:
   ```bash
   php artisan make:filament-resource Expense --panel=admin --generate
   ```

2. تخصيص المورد بإضافة:
   - الترجمة العربية (مصروف، المصروفات)
   - أيقونة مناسبة (heroicon-o-receipt-percent)
   - ضبط مجموعة التنقل (المالية)
   - تقسيم نموذج الإدخال إلى أقسام منطقية:
     - معلومات المصروف الأساسية (النوع، المبلغ، الحلقة، الفصل الدراسي)
     - معلومات المستفيد والموافقة (اسم المستفيد، الموافق، مرجع المعاملة)
     - ملاحظات إضافية

3. تحسين واجهة عرض البيانات وإضافة:
   - عرض المبالغ بتنسيق العملة السعودية
   - عرض نوع المصروف والحلقة المرتبطة
   - تمييز المصروفات المخصصة للمركز بأيقونة مميزة
   - فلاتر متقدمة للبحث حسب نوع المصروف والحلقة والفصل الدراسي والفترة الزمنية
   - تسجيل مستخدم الإدخال والموافق بشكل تلقائي

4. معالجة وإصلاح الأخطاء التي ظهرت:
   - إصلاح خطأ في حقل `is_active` الذي كان مستخدماً في الحلقات القرآنية
   - تعديل استعلام الحلقات ليستخدم `circle_status` بدلاً من `is_active`
   - إصلاح خطأ في الفصول الدراسية بإزالة شرط التصفية الذي كان يسبب مشاكل
   - تعديل طريقة الحصول على معرّف المستخدم المسجّل باستخدام `Auth::id()`

**النتائج:**
- تم إنشاء واجهة متكاملة لإدارة المصروفات
- إمكانية تصنيف المصروفات حسب نوعها والحلقة المرتبطة أو المركز
- عرض بيانات المستفيدين والموافقين وتفاصيل المعاملات
- تسجيل المستخدم الذي أدخل البيانات والموافق بشكل تلقائي
- حل المشكلات المتعلقة بالعلاقات والحقول غير الموجودة في قاعدة البيانات

**ملاحظات وتحديات المرحلة الخامسة:**
- تم التغلب على تحديات العلاقات بين مختلف النماذج في النظام
- تم معالجة عدة أخطاء متعلقة بحقول غير موجودة في قاعدة البيانات مثل:
  - حقل `is_active` في جدول `quran_circles`
  - حقل `is_current` و `is_active` في جدول `academic_terms`
- تم تحسين طريقة الوصول لمعرف المستخدم المسجل الدخول
- تم ترتيب موارد المالية بشكل منطقي في لوحة التحكم
- تم تنسيق وترجمة جميع عناصر الواجهة إلى اللغة العربية لتحسين تجربة المستخدم

### المرحلة 6: تطوير موارد طلبات الخدمة

1. إنشاء موارد طلبات نقل المعلمين (Teacher Transfer Requests)
2. إنشاء موارد طلبات فتح الحلقات (Circle Opening Requests)
3. إنشاء موارد طلبات احتياج الحلقات (Circle Needs Requests)
4. تطوير مسارات العمل (Workflows) الخاصة بالطلبات
5. إنشاء نماذج الطلبات والموافقات

### المرحلة 7: تطوير موارد التسويق ومؤشرات الأداء

1. إنشاء موارد مؤشرات الأداء التسويقية (Marketing KPIs)
2. إنشاء موارد قيم مؤشرات الأداء (KPI Values)
3. إنشاء موارد أهداف الإيرادات (Revenue Targets)
4. إنشاء موارد متابعي الفروع (Branch Followers)
5. إنشاء موارد الأنشطة التسويقية (Marketing Activities)
6. تطوير موارد منشورات التواصل الاجتماعي (Social Media Posts)

### المرحلة 8: تطوير موارد إدارة المهام والخطة الاستراتيجية

1. إنشاء موارد المهام (Tasks)
2. إنشاء موارد تعليقات المهام ومرفقاتها (Task Comments & Attachments)
3. إنشاء موارد حالات المهام (Task Statuses)
4. إنشاء موارد المهام التسويقية وأسابيعها (Marketing Tasks & Weeks)
5. إنشاء موارد الخطط الاستراتيجية (Strategic Plans)
6. إنشاء موارد المؤشرات الاستراتيجية (Strategic Indicators)
7. إنشاء موارد عمليات الرصد والمبادرات الاستراتيجية (Strategic Monitorings & Initiatives)

### المرحلة 9: تطوير لوحات المعلومات والتقارير

1. إنشاء لوحة معلومات المساجد والحلقات
2. إنشاء لوحة معلومات المعلمين والطلاب
3. إنشاء لوحة معلومات الرواتب والمالية
4. إنشاء لوحة معلومات الإيرادات والمصروفات
5. إنشاء لوحة معلومات الطلبات والخدمات
6. إنشاء لوحة معلومات التسويق ومؤشرات الأداء
7. إنشاء لوحة معلومات المهام والخطة الاستراتيجية
8. إنشاء لوحة معلومات الإحصاءات العامة
9. تطوير التقارير المختلفة (PDF & Excel)

### المرحلة 10: تخصيص الواجهات حسب الأدوار

1. تخصيص واجهة مدير النظام (Super Admin)
2. تخصيص واجهة مدير المركز (Admin)
3. تخصيص واجهة المشرف التربوي (Supervisor)
4. تخصيص واجهة المعلم (Teacher)
5. تخصيص واجهة الموظف الإداري (Staff)
6. إنشاء واجهة الطالب (Student)

### المرحلة 11: اختبار وتحسين النظام

1. إجراء اختبارات شاملة للنظام
2. تحسين أداء لوحة التحكم
3. تعزيز تجربة المستخدم وإضافة تحسينات
4. معالجة الأخطاء وإصلاح المشكلات
5. توثيق النظام النهائي
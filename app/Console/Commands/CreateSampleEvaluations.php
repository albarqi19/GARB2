<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Teacher;
use App\Models\TeacherEvaluation;
use App\Models\User;
use Illuminate\Support\Carbon;

class CreateSampleEvaluations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'evaluations:create-sample {--count=10 : ุนุฏุฏ ุงูุชููููุงุช ุงููุฑุงุฏ ุฅูุดุงุคูุง}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'ุฅูุดุงุก ุจูุงูุงุช ุชุฌุฑูุจูุฉ ูุชููููุงุช ุงููุนูููู';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('๐ ุจุฏุก ุฅูุดุงุก ุจูุงูุงุช ุชุฌุฑูุจูุฉ ูุชููููุงุช ุงููุนูููู...');

        // ุงูุชุญูู ูู ูุฌูุฏ ูุนูููู ูู ุงููุธุงู
        $teachers = Teacher::all();
        if ($teachers->isEmpty()) {
            $this->error('โ ูุง ููุฌุฏ ูุนูููู ูู ุงููุธุงู. ูุฑุฌู ุฅุถุงูุฉ ูุนูููู ุฃููุงู.');
            return;
        }

        // ุงูุชุญูู ูู ูุฌูุฏ ูุณุชุฎุฏููู ููููููู
        $evaluators = User::all();
        if ($evaluators->isEmpty()) {
            $this->error('โ ูุง ููุฌุฏ ูุณุชุฎุฏููู ูู ุงููุธุงู. ูุฑุฌู ุฅุถุงูุฉ ูุณุชุฎุฏููู ุฃููุงู.');
            return;
        }

        $count = $this->option('count');
        $this->info("๐ ุณูุชู ุฅูุดุงุก {$count} ุชููููุงุช ุชุฌุฑูุจูุฉ...");

        $bar = $this->output->createProgressBar($count);
        $bar->start();

        $evaluationPeriods = ['ุดูุฑู', 'ูุตูู', 'ูุตู ุณููู', 'ุณููู', 'ุชูููู ุฎุงุต'];
        $statuses = ['ูุณูุฏุฉ', 'ููุชูู', 'ูุนุชูุฏ', 'ูุฑุงุฌุนุฉ'];
        $evaluatorRoles = ['ูุฏูุฑ', 'ูุดุฑู', 'ูุดุฑู ุชุฑุจูู', 'ูุนูู ุฃูู'];

        for ($i = 0; $i < $count; $i++) {
            // ุงุฎุชูุงุฑ ูุนูู ุนุดูุงุฆู
            $teacher = $teachers->random();
            
            // ุงุฎุชูุงุฑ ูููู ุนุดูุงุฆู
            $evaluator = $evaluators->random();

            // ุฅูุดุงุก ุฏุฑุฌุงุช ุนุดูุงุฆูุฉ ูุงูุนูุฉ
            $performanceScore = $this->generateRealisticScore();
            $attendanceScore = $this->generateRealisticScore();
            $studentInteractionScore = $this->generateRealisticScore();
            $behaviorCooperationScore = $this->generateRealisticScore();
            $memorizationRecitationScore = $this->generateRealisticScore();
            $generalEvaluationScore = $this->generateRealisticScore();

            // ุญุณุงุจ ุงููุชูุฌุฉ ุงูุฅุฌูุงููุฉ
            $totalScore = $performanceScore + $attendanceScore + $studentInteractionScore + 
                         $behaviorCooperationScore + $memorizationRecitationScore + $generalEvaluationScore;

            // ุฅูุดุงุก ุงูุชูููู
            TeacherEvaluation::create([
                'teacher_id' => $teacher->id,
                'performance_score' => $performanceScore,
                'attendance_score' => $attendanceScore,
                'student_interaction_score' => $studentInteractionScore,
                'behavior_cooperation_score' => $behaviorCooperationScore,
                'memorization_recitation_score' => $memorizationRecitationScore,
                'general_evaluation_score' => $generalEvaluationScore,
                'total_score' => $totalScore,
                'evaluation_date' => Carbon::now()->subDays(rand(1, 30)),
                'evaluation_period' => $evaluationPeriods[array_rand($evaluationPeriods)],
                'notes' => $this->generateEvaluationNotes($totalScore),
                'evaluator_id' => $evaluator->id,
                'evaluator_role' => $evaluatorRoles[array_rand($evaluatorRoles)],
                'status' => $statuses[array_rand($statuses)],
            ]);

            $bar->advance();
        }

        $bar->finish();
        $this->newLine(2);

        // ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุชููููุงุช ุงูููุดุฃุฉ
        $this->displayStatistics($count);

        $this->info('โ ุชู ุฅูุดุงุก ุจูุงูุงุช ุงูุชููููุงุช ุงูุชุฌุฑูุจูุฉ ุจูุฌุงุญ!');
        $this->info('๐ ููููู ุงูุขู ุงููุตูู ุฅูู ุตูุญุฉ ุชููููุงุช ุงููุนูููู ูู ููุญุฉ ุงูุชุญูู.');
    }

    /**
     * ุชูููุฏ ุฏุฑุฌุฉ ูุงูุนูุฉ ูููุนุงููุฑ (ุจูู 10-20)
     */
    private function generateRealisticScore(): float
    {
        // ุชูุฒูุน ูุงูุนู: ูุนุธู ุงูุฏุฑุฌุงุช ุชููู ุฌูุฏุฉ ูุน ุจุนุถ ุงูุชููุน
        $rand = rand(1, 100);
        
        if ($rand <= 10) {
            // 10% ุฏุฑุฌุงุช ุถุนููุฉ (10-14)
            return round(rand(100, 140) / 10, 1);
        } elseif ($rand <= 30) {
            // 20% ุฏุฑุฌุงุช ูุชูุณุทุฉ (14-16)
            return round(rand(140, 160) / 10, 1);
        } elseif ($rand <= 70) {
            // 40% ุฏุฑุฌุงุช ุฌูุฏุฉ (16-18)
            return round(rand(160, 180) / 10, 1);
        } else {
            // 30% ุฏุฑุฌุงุช ููุชุงุฒุฉ (18-20)
            return round(rand(180, 200) / 10, 1);
        }
    }

    /**
     * ุชูููุฏ ููุงุญุธุงุช ุชูููู ุญุณุจ ุงููุชูุฌุฉ
     */
    private function generateEvaluationNotes(float $totalScore): string
    {
        $notes = [
            'ููุชุงุฒ' => [
                'ุฃุฏุงุก ูุชููุฒ ูู ุฌููุน ุงููุนุงููุฑ',
                'ูุนูู ููุชุฒู ููุชูุงูู ูู ุนููู',
                'ุชูุงุนู ุฅูุฌุงุจู ูุน ุงูุทูุงุจ ูุญูุงุณุฉ ูู ุงูุชุฏุฑูุณ',
                'ุณููู ูุซุงูู ูุชุนุงูู ููุชุงุฒ ูุน ุงูุฒููุงุก',
                'ุฅุชูุงู ุนุงูู ููุชูุงูุฉ ูุงูุญูุธ',
            ],
            'ุฌูุฏ ุฌุฏุงู' => [
                'ุฃุฏุงุก ุฌูุฏ ุฌุฏุงู ูุน ุฅููุงููุฉ ููุชุญุณูู',
                'ุงูุชุฒุงู ุจุงูุญุถูุฑ ูุน ุจุนุถ ุงูููุงุญุธุงุช ุงูุจุณูุทุฉ',
                'ุชูุงุนู ุฌูุฏ ูุน ุงูุทูุงุจ',
                'ุณููู ุทูุจ ูุชุนุงูู ูุน ุงููุฑูู',
                'ูุณุชูู ุฌูุฏ ูู ุงูุญูุธ ูุงูุชูุงูุฉ',
            ],
            'ุฌูุฏ' => [
                'ุฃุฏุงุก ููุจูู ูุญุชุงุฌ ุฅูู ุชุทููุฑ',
                'ูุญุชุงุฌ ุฅูู ุชุญุณูู ุงูุงูุชุฒุงู ุจุงูุญุถูุฑ',
                'ุชูุงุนู ูุชูุณุท ูุน ุงูุทูุงุจ',
                'ูุญุชุงุฌ ุฅูู ุชุทููุฑ ุงูุชุนุงูู ูุน ุงูุฒููุงุก',
                'ูุณุชูู ูุชูุณุท ูู ุงูุชูุงูุฉ',
            ],
            'ููุจูู' => [
                'ุฃุฏุงุก ูุญุชุงุฌ ุฅูู ุชุญุณูู ูุจูุฑ',
                'ูุดุงูู ูู ุงูุงูุชุฒุงู ุจุงูุญุถูุฑ',
                'ุถุนู ูู ุงูุชูุงุนู ูุน ุงูุทูุงุจ',
                'ูุญุชุงุฌ ุฅูู ุชุฏุฑูุจ ุฅุถุงูู',
                'ูุญุชุงุฌ ุฅูู ุชุญุณูู ูุณุชูู ุงูุญูุธ',
            ],
            'ุถุนูู' => [
                'ุฃุฏุงุก ุถุนูู ูุญุชุงุฌ ุฅูู ูุชุงุจุนุฉ ููุซูุฉ',
                'ูุดุงูู ุฌุฏูุฉ ูู ุงูุงูุชุฒุงู',
                'ุตุนูุจุฉ ูู ุงูุชุนุงูู ูุน ุงูุทูุงุจ',
                'ูุญุชุงุฌ ุฅูู ุฎุทุฉ ุชุญุณูู ุนุงุฌูุฉ',
                'ูุณุชูู ุถุนูู ูุญุชุงุฌ ุฅูู ุชุฏุฑูุจ ููุซู',
            ]
        ];

        $grade = match (true) {
            $totalScore >= 90 => 'ููุชุงุฒ',
            $totalScore >= 80 => 'ุฌูุฏ ุฌุฏุงู',
            $totalScore >= 70 => 'ุฌูุฏ',
            $totalScore >= 60 => 'ููุจูู',
            default => 'ุถุนูู'
        };

        return $notes[$grade][array_rand($notes[$grade])];
    }

    /**
     * ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุชููููุงุช ุงูููุดุฃุฉ
     */
    private function displayStatistics(int $count): void
    {
        $this->info('๐ ุฅุญุตุงุฆูุงุช ุงูุชููููุงุช ุงูููุดุฃุฉ:');
        
        $evaluations = TeacherEvaluation::latest()->take($count)->get();
        
        $excellent = $evaluations->where('total_score', '>=', 90)->count();
        $veryGood = $evaluations->whereBetween('total_score', [80, 89.9])->count();
        $good = $evaluations->whereBetween('total_score', [70, 79.9])->count();
        $acceptable = $evaluations->whereBetween('total_score', [60, 69.9])->count();
        $weak = $evaluations->where('total_score', '<', 60)->count();

        $this->table(
            ['ุงูุชุตููู', 'ุงูุนุฏุฏ', 'ุงููุณุจุฉ'],
            [
                ['ููุชุงุฒ (90-100%)', $excellent, round($excellent / $count * 100, 1) . '%'],
                ['ุฌูุฏ ุฌุฏุงู (80-89%)', $veryGood, round($veryGood / $count * 100, 1) . '%'],
                ['ุฌูุฏ (70-79%)', $good, round($good / $count * 100, 1) . '%'],
                ['ููุจูู (60-69%)', $acceptable, round($acceptable / $count * 100, 1) . '%'],
                ['ุถุนูู (ุฃูู ูู 60%)', $weak, round($weak / $count * 100, 1) . '%'],
            ]
        );

        $avgScore = round($evaluations->avg('total_score'), 2);
        $this->info("๐ ูุชูุณุท ุงููุชุงุฆุฌ: {$avgScore}%");
    }
}
